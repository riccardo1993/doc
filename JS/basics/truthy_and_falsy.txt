TRUTHY AND FALSY

	In javascript a thruty value is a value that is considered true when encountered in a Booleans context. All values are truthy unless they are defined as falsy. That is, all values are truthy except
		- false
		- 0
		--0
		- on 
		- "" 
		- null
		- undefined
		- NaN
		- document.all

		Javasript use type coercion in Boolean contexts

	Examples of truthy values in JavaScript (which will be coerced to true in boolean contexts, and thus execute the if block):

		if (true)
		if ({})
		if ([])
		if (42)
		if ("0")
		if ("false")
		if (new Date())
		if (-42)
		if (12n)
		if (3.14)
		if (-3.14)
		if (Infinity)
		if (-Infinity)

	The logical AND operator, &&
	If the first operand is truthy, the logical AND operator returns the second operand:

		true && "dog"
		// returns "dog"

		[] && "dog"
		// returns "dog"



	A falsy (sometimes written falsey) value is a value that is considered false when encountered in a Boolean context.

	Javascript uses type conversion to coerce any value to a Boolean in contexts that require it, such as conditionals and loops.

	JS Falsy values:
	values:

	Value	  	Type		Description
	---------------------------------------------------------------------------------------------------
	null	  	Null		The keyword null — the absence of any value.
	undefined 	Undefined	undefined — the primitive value.
	false	  	Boolean		The keyword false.
	NaN		  	Number		NaN — not a number.
	0	      	Number		The Number zero, also including 0.0, 0x0, etc.
	-0	      	Number		The Number negative zero, also including -0.0, -0x0, etc.
	0n	        BigInt		The BigInt zero, also including 0x0n, etc. Note that there is no BigInt 							negative zero — the negation of 0n is 0n.
	""	        String		Empty string value, also including '' and ``.
	docment.all Object		The only falsy object in JavaScript is the built-in document.all.
	----------------------------------------------------------------------------------------------------
		The values null and undefined are also nullish.

		Examples of falsy values in JavaScript (which are coerced to false in Boolean contexts, and thus bypass the if block):

	EXAMPLES
		if (false) {
		  // Not reachable
		}

		if (null) {
		  // Not reachable
		}

		if (undefined) {
		  // Not reachable
		}

		if (0) {
		  // Not reachable
		}

		if (-0) {
		  // Not reachable
		}

		if (0n) {
		  // Not reachable
		}

		if (NaN) {
		  // Not reachable
		}

		if ("") {
		  // Not reachable
		}
		

	The logical AND operator, &&
	If the first object is falsy, it returns that object:

		console.log(false && "dog");
		// ↪ false

		console.log(0 && "dog");
		// ↪ 0